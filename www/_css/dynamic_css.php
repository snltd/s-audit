<?php

//============================================================================
//
// dynamic_css.php
// ---------------
//
// This small script generates a stylesheet presenting solid and boxed
// table cells in the same way as the inline style generated by the
// colours::solid() and colours::box() functions.
//
// When you colour cells which can only have a box or solid colouring,
// use the classes boxcol and solidcol. If you use both, colour the
// field with the class, and the box with the inline style functions.
//
// Always generates box and solid styles for the colours in the
// colours::cols array. Also generates other styles depending on the name of
// the page which includes it.
//
// Part of s-audit. (c) 2011 SearchNet Ltd
//  see http://snltd.co.uk/s-audit for licensing and documentation
//
//============================================================================

// We need a couple of defines, so load up the site config, then get the
// colours file, which has the arrays in it which define our colours.

require_once("$_SERVER[DOCUMENT_ROOT]/_conf/s-audit_config.php");
require_once(LIB . "/colours.php");

$cols = new Colours;

// Set a couple of variables

$col_grp = $fscol_grp = $storcol_grp = $hscol_grp = "";

$qs = preg_replace("/\?.*$/", "", $_SERVER["QUERY_STRING"]);
$qs = str_replace("class_", "", $qs);

// single server and compare views potentially need everything

if ($qs == "single_server.php" || $qs == "compare.php")
	define("ALL", 1);

// Tell the browser what's coming, and open the stylesheet with a comment.

header("Content-Type: text/css");

echo "/* Dynamically generated stylesheet */\n/* begin \"cols\" */\n";

//----------------------------------------------------------------------------
// all pages - colours::cols array

// These are used all over the place, so they're always present. Work
// through the cols array, producing a .boxcol and .solidcol for each.
// Store up the names to do a group padding setting

foreach($cols->get_col_list("cols") as $name=>$hex) {
	echo "\n.solid$name { background: ${hex} }"
	. "\n.box$name { border: 2px solid ${hex} }\n";
	$col_grp .= ".box$name, ";
}

// Cells on the single server view are well padded

$pad = (defined("ALL"))
	? "7px"
	: "0";

echo "\n" . preg_replace("/, $/", " { padding: $pad }", $col_grp),
"\n\n/* hostname boxes */\n";

// Hostname boxes and key. First global, then local

$ga = "td.phys, ";
$gk = "li.kphys, ";
$za = "td.lz, ";
$zk = "li.lz, ";

foreach($cols->get_col_list("m_cols") as $name=>$hex) {
	echo "\ntd.${name}, li.k$name { border: 2px solid $hex }";
	$ga .= "td.${name}, ";
	$gk .= "li.k${name}, ";
}

echo "\n\n", preg_replace("/, $/", " {\n  white-space: nowrap;\n  " .
"text-align: left;\n  font-weight: bold;\n  padding-left: 3px;\n}", $ga),
"\n\n", preg_replace("/, $/", " { background-color: #c0c9e4 }", $gk);

foreach($cols->get_col_list("z_cols") as $name=>$hex) {
	echo "\ntd.$name, li.k$name { border: 2px solid $hex }";
	$za .= "td.${name}, ";
	$zk .= "li.k${name}, ";
}

echo "\n\n", preg_replace("/, $/", " {\n  white-space: nowrap;\n  " .
"font-weight: normal;\n  text-align: left;\n  padding-left: 15px;\n}", $za),
"\n\n", preg_replace("/, $/", " { background-color: #dcdcdc }", $zk);
"\n\n/* end cols */\n";

//----------------------------------------------------------------------------
// filesystem audits - colours::fs_cols

// These colours are for filesystem audits. There are two class types,
// boxcol and smallboxcol, where "col" is the filesystem type, such as ufs
// or hsfs. boxcol is used in the "root fs" column, smallboxcol in the fs
// column. These are only created if the calling page is fs.php

if ($qs == "fs.php" || defined("ALL")) {
	echo "\n/* begin fscols */\n";

	foreach($cols->get_col_list("fs_cols") as $name=>$hex)
		echo "\n.$name { border: 2px solid $hex }\n";

	echo "\n\n/* end fscols */\n";
}

//----------------------------------------------------------------------------
// networking audits - colours::nic_cols. Also use for colouring ALOM on
// platform page

if ($qs == "net.php" || $qs == "index.php" || defined("ALL")) {
	echo "\n/* begin nic_cols */\n";

	$getlist = (defined(SUBNET_COLS))
		? "subnet_cols"
		: "net_cols";

	foreach($cols->get_col_list($getlist) as $name=>$hex) {
		$nn = "net" . preg_replace("/\./", "", $name);
		echo "\n.$nn { background: $hex }";
		echo "\n.box$nn { border: 2px solid $hex }";
	}

	echo "\n\n/* end nic_cols */\n";
}

//----------------------------------------------------------------------------
// platform audits - colours::stor_cols

// storage types aren't left-aligned. Just coloured

if ($qs == "index.php" || $qs == "platform.php" || defined("ALL")) {
	echo "\n/* begin platformcols */\n";

	foreach(array_merge($cols->get_col_list("stor_cols"),
	$cols->get_col_list("eeprom_cols"),
	$cols->get_col_list("card_cols")) as $name=>$hex)
		echo "\n.$name { border: 2px solid ${hex} }";

	echo "\n/* end platformcols */\n";
}

//----------------------------------------------------------------------------
// O/S audits - colours::vm_cols

if ($qs == "os.php" || defined("ALL")) {
	echo "\n/* begin vm_cols */\n";

	foreach($cols->get_col_list("vm_cols") as $name=>$hex) 
		echo "\n." . strtolower(str_replace(" ", "_", $name)) . " {
			border: 2px solid $hex }\n";

	echo "\n\n/* end vm_cols */\n";
}

//----------------------------------------------------------------------------
// hosted services audits - colours::ws_cols and ::db_cols

// Web server and DB server colours 

if ($qs == "hosted.php" || defined("ALL")) {
	echo "\n/* begin hosted */\n";

	foreach(array_merge($cols->get_col_list("db_cols"),
	$cols->get_col_list("ws_cols")) as $name=>$hex) {

		// Have to do td and dot because of style priority problems

		echo "\ntd.$name, .$name { border: 2px solid $hex }";
		$hscol_grp .= "td.${name}, .${name}, ";
	}

	// The strongr and strongg links are for the clickable domain names on
	// the hosted services page. They're bold-face red and green

	echo "\na.strongr, .strongr { color: #94112D }\n\na.strongg, .strongg ",
	"{ color: #355F26; }\n\na.strongr, a.strongg, .strongr, .strongg ",
	"{ font-weight: bold }\n\n/* end hosted */\n";
}

?>

